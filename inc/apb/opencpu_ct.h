#ifndef OPENCPU_CT_H_
#define OPENCPU_CT_H_

#define APB_PROXY_RESULT_OK  1
#define APB_PROXY_RESULT_ERROR  0

//************************************OPENCPU接口************************************************************
/**********************************************************************
* 描  述: 手动读取消息模式下，平台待读取消息通知回调函数，需用户实现
* 参  数:
          data_length: 待读取消息长度
* 返回值:
 ***********************************************************************/
typedef void (*ct_nmi_cb_t)       (int data_length);

/**********************************************************************
* 描  述: 自动读取消息模式下，平台下发消息回调函数，需用户实现
* 参  数:
          read_actual_length: 实际下发消息长度
		  remain_length： 剩余消息长度（自动读取消息模式为0）
		  data： 下发消息内容
* 返回值:
 ***********************************************************************/
typedef void (*ct_read_cb_t)      (int read_actual_length, int remain_length, char *data);

/**********************************************************************
* 描  述: 打印设备状态、通知类的消息回调函数，需用户实现
* 参  数:
          type: 消息上报的类型
		  1 register success
		  2 register failed
		  3 register update success
		  4 register update failed
		  5 observe success
		  6 observe failed
		  7 notify success
		  8 notify failed
		  9 handshake success
		  10 handshake failed
		  11 deregister success
  		  12 deregister failed
		  13 lwm2m session abnormal
* 返回值:
 ***********************************************************************/
typedef void (*ct_evtind_cb_t)    (int type);

/**********************************************************************
* 描  述: 消息发送状态上报回调函数，需用户实现
* 参  数:
          seq: AT+MLWSEND 命令中指定的 seq
		  status： 发送状态 1：成功
* 返回值:
 ***********************************************************************/
typedef void (*ct_str_cb_t)       (int seq, int status);

/**********************************************************************
* 描  述: 手动读取消息模式下接收缓冲区满上报回调函数，需用户实现
* 参  数:
          length： 丢弃信息长度
* 返回值:
 ***********************************************************************/
typedef void (*ct_drop_cb_t)      (int length);

typedef struct ct_cb
{
	ct_nmi_cb_t	onNmi;
	ct_read_cb_t onRead;
	ct_evtind_cb_t onEvtind;
	ct_str_cb_t	onStr;
	ct_drop_cb_t onDrop;
}ct_cb_t;

/**********************************************************************
* 描  述: 注册回调函数
* 参  数: ct_cb: 需注册的回调函数
* 返回值:
 ***********************************************************************/
extern void opencpu_ct_create(ct_cb_t *ct_cb); 

/**********************************************************************
* 描  述: 创建CT设备实例，当前只允许创建一个设备
* 参  数:
          server: 需注册的CT平台服务器IP
          port:   需注册的CT平台服务器port
* 返回值:
          1: 创建成功
          0: 创建失败
 ***********************************************************************/
extern int opencpu_ct_new(char *server, char *port);

/**********************************************************************
* 描  述: 创建CT设备实例（带加密），当前只允许创建一个设备
* 参  数:
          server: 需注册的CT平台服务器IP
          port:   需注册的CT平台服务器port
		  pskid   Mandatory for DTLS port, like 5684
		  psk	  Mandatory for DTLS port, like 5684
* 返回值:
          1: 创建成功
          0: 创建失败
 ***********************************************************************/
extern int opencpu_ct_new_ex(char *server, char *port, char *pskid, char *psk);

/**********************************************************************
* 描  述: 将已实例化的设备注册至平台
* 参  数:
          mode: 注册至平台后，平台下发消息接收模式  0  //自动接收模式 (default)
		  										 1  //手动接收模式
          keepalivetime:  设备自动向平台更新在线状态周期
* 返回值:
          1: 注册成功
          0: 注册失败
 ***********************************************************************/
extern int opencpu_ct_open(int mode, int keepalivetime);

/**********************************************************************
* 描  述: 更新设备在线状态
* 参  数:
* 返回值:
          1: 更新成功
          0: 更新失败
 ***********************************************************************/
extern int opencpu_ct_update();

/**********************************************************************
* 描  述: 配置消息收发格式（HEX/TEXT）
* 参  数: 
		send_data_format: 0 //HEX (default)  
						  1 //TEXT
		recvformat： 0 //HEX (default)  
					 1 //TEXT
* 返回值:
          1: 配置成功
          0: 配置失败
 ***********************************************************************/
extern int opencpu_ct_setcfg(int sendformat, int recvformat);

/**********************************************************************
* 描  述: 发送消息至CT平台
* 参  数: 
		length: 发送消息长度  
		data： 发送消息内容，发送内容必须与平台设备profile定义字段匹配
* 返回值:
          1: 发送成功
          0: 发送失败
 ***********************************************************************/
extern int opencpu_ct_send(int length, char *data);

/**********************************************************************
* 描  述: 发送消息至CT平台（带消息发送状态回传）
* 参  数: 
		length: 发送消息长度  
		data： 发送消息内容，发送内容必须与平台设备profile定义字段匹配
		mode： 发送的 COAP 消息类型
				BIT 0-2： 0 发送 CON 消息 默认
						  1 发送 NON 消息
				BIT 3  是否携带 RAI 标志，对于 NON 消息类型，携带 RELEASE 释放辅助指示， 对于 CON消息携带 RELEASE_AFTER_REPLY 释放辅助指示
		seq： 表示是否需要支持查询发送状态
* 返回值:
          1: 发送成功
          0: 发送失败
 ***********************************************************************/
extern int opencpu_ct_send_ex(int length, char *data, int mode, int seq);

/**********************************************************************
* 描  述: 手动读取消息模式下读取平台下发消息
* 参  数: 
		readlength: 消息读取长度  
		read_actual_length： 返回值，实际读取长度
		remain_length： 返回值，剩余待读取长度
		data： 返回值，读取消息内容
* 返回值:
          1: 读取成功
          0: 读取失败
 ***********************************************************************/
extern int opencpu_ct_read(int readlength, int read_actual_length, int remain_length, char *data);

/**********************************************************************
* 描  述: 设备注销
* 参  数: 
* 返回值:
          1: 注销成功
          0: 注销失败
 ***********************************************************************/
extern int opencpu_ct_close();

/**********************************************************************
* 描  述: 删除设备实例（推荐先注销后删除，若平台无响应无法注销也可直接删除设备实例）
* 参  数: 
* 返回值:
          1: 删除成功
          0: 删除失败
 ***********************************************************************/
extern int opencpu_ct_client_delte();
//************************************OPENCPU接口************************************************************

#endif